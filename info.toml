# INTRO

[[exercises]]
name = "intro1"
path = "exercises/intro/intro1.nr"
mode = "test"
hint = """
No hints this time ;)
"""

# MERKLE TREE

# [[exercises]]
# name = "merkle-tree"
# path = "exercises/merkle-tree/merkle.nr"
# mode = "test"
# hint = """
# No hints this time ;)
# """

# VARIABLES

[[exercises]]
name = "variables1"
path = "exercises/variables/variables1.nr"
mode = "compile"
hint = """
No hint this time
"""

[[exercises]]
name = "variables2"
path = "exercises/variables/variables2.nr"
mode = "compile"
hint = """
No hint this time
"""

[[exercises]]
name = "variables3"
path = "exercises/variables/variables3.nr"
mode = "compile"
hint = """
No hint this time
"""

[[exercises]]
name = "variables4"
path = "exercises/variables/variables4.nr"
mode = "compile"
hint = """
No hint this time
"""

[[exercises]]
name = "variables5"
path = "exercises/variables/variables5.nr"
mode = "compile"
hint = """
No hint this time
"""

[[exercises]]
name = "variables6"
path = "exercises/variables/variables6.nr"
mode = "compile"
hint = """
No hint this time
"""


# CONTROL FLOW

[[exercises]]
name = "if1"
path = "exercises/control-flow/if1.nr"
mode = "test"
hint = """
No hint this time
"""

[[exercises]]
name = "grade_calculator"
path = "exercises/control-flow/grade_calculator.nr"
mode = "test"
hint = """
No hint this time
"""


[[exercises]]
name = "count_factors"
path = "exercises/control-flow/count_factors.nr"
mode = "test"
hint = """
No hint this time
"""


# Arrays

[[exercises]]
name = "array_basics"
path = "exercises/arrays/array_basics.nr"
mode = "test"
hint = """
No hint this time
"""

[[exercises]]
name = "array_advance"
path = "exercises/arrays/array_advance.nr"
mode = "test"
hint = """
No hint this time
"""


# Structs

[[exercises]]
name = "structs1"
path = "exercises/structs/structs1.nr"
mode = "test"
hint = """
No hint this time
"""

[[exercises]]
name = "structs2"
path = "exercises/structs/structs2.nr"
mode = "test"
hint = """
No hint this time
"""

[[exercises]]
name = "structs3"
path = "exercises/structs/structs3.nr"
mode = "test"
hint = """
Define Person Struct like this
```
struct Person {
    name: str<10>,
    age: Field,
    home_address: Address,
}
```
First create a home_address like
```
let home_address = Address { street_number: street_num, zip_code: zip };
```
Finally create and resturn Person instance
```
Person { name, age, home_address }
```
"""

[[exercises]]
name = "shopping_cart"
path = "exercises/structs/shopping_cart.nr"
mode = "test"
hint = """
Define `new()` method inside implementation block
```
    fn new() -> Cart {
        let product = Product { id: 0, price: 0, quantity: 0 };
        Cart { items: [product; 3], total_items: 0 }
    }
```
Define `add_product` method inside implementation block
```
    fn add_product(&mut self, product: Product) -> bool {
        if self.total_items as u64 >= 3 {
            false
        } else {
            self.items[self.total_items as u64] = product;
            self.total_items = self.total_items + 1;
            true
        }
    }
```
"""

# REFERENCES

[[exercises]]
name = "reference1"
path = "exercises/references/reference1.nr"
mode = "test"
hint = """
```
let temp = *a;
*a = *b;
*b = temp;
```
"""

[[exercises]]
name = "reference2"
path = "exercises/references/reference2.nr"
mode = "test"
hint = """
```
    fn increment(&mut self) {
        self.value = self.value + self.step;
    }
    fn update_step(&mut self, new_step: Field) {
        self.step = new_step;
    }
```
As you may have noticed we are not using dereferce symbol(*) because compiler automatically dereferences the struct 
reference when you access its fields. This is called "auto-dereferencing" or "auto-ref/deref".
"""

#SLICES

[[exercises]]
name = "slice1"
path = "exercises/slices/slice1.nr"
mode = "test"
hint = """
```
let mut slice = &[1, 2, 3];
slice = slice.push_back(4);
slice = slice.push_front(0);
```

"""

[[exercises]]
name = "slice2"
path = "exercises/slices/slice2.nr"
mode = "test"
hint = """
1. Use `insert` method to insert element at particular index. `insert` method returns new slice.
```
slice = slice.insert(2, 42);
```
2. Remove element from front using `pop_front` method. This method returns a tuple of removed element and new slice.
    let (_, slice) = slice.pop_front();
3. return slice length typecasted as Field.
```
slice.len() as Field
```
"""

[[exercises]]
name = "slice3"
path = "exercises/slices/slice3.nr"
mode = "test"
hint = """
1. First create a new slice of doubled elements using `map` method.
```
    let slice1 = input.map(|a| a * 2);
```
2. Filter elements greater than 10 using `filter method`
```
    let slice2 = slice1.filter(|a| a as u64 <= 10);
```
3. Return the slice
```    
slice2
```
"""

[[exercises]]
name = "slice4"
path = "exercises/slices/slice4.nr"
mode = "test"
hint = """
1. We are going to use `Stats` struct to store sum and count. define initial value for accumulator
```
let acc = Stats { sum: 0, count: 0 };
```
2. Use `fold` method to fold values. Here we are passing closure function that will process each element of slice. 
3. Remember to define explicit type in closure for `acc` and `x` as type must be known by this point.
```
let stats = numbers.fold(acc, |acc: Stats, x: Field| Stats { sum: acc.sum + x, count: acc.count + 1 });
```
4. Return the average
```
stats.sum / stats.count
```
"""

[[exercises]]
name = "slice5"
path = "exercises/slices/slice5.nr"
mode = "test"
hint = """
```
let valid_transactions = transactions.filter(|txn: Transaction| txn.valid == true);
let amounts = valid_transactions.map(|txn: Transaction| txn.amount);
let sum = amounts.reduce(|acc: Field,x: Field| acc + x);
```
"""
# TUPLES
[[exercises]]
name = "tuple1"
path = "exercises/tuples/tuple1.nr"
mode = "test"
hint = """
```
let person = (name,age,zip);
person
```
"""

[[exercises]]
name = "tuple2"
path = "exercises/tuples/tuple2.nr"
mode = "test"
hint = """
```
No hint this time
```
"""
